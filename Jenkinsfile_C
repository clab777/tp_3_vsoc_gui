pipeline {

    agent {
        label 'docker'
    }

    tools {
        maven "Maven" // Configure maven in the Global Tools Configuration page
        snyk 'snyk'

    }

    environment {
        JAVA_TOOL_OPTIONS = "-Duser.home=/home/jenkins"

        CONTAINER_NAME="vsoc-jdi"
        CONTAINER_TAG="latest"
        DOCKER_HUB_USER="ctraore"
        HTTP_PORT="8000"

        APP = imageBuild(CONTAINER_NAME, CONTAINER_TAG)

        SNYK_INSTALL_ID="SnykV2PluginTest"
        SNYK_TOKEN='9c0b48e6-7f17-4844-a3aa-a6aec82a384e'
    }


    stages{
        stage('Initialize'){
           steps {
               echo 'Initialize & Cleanup Workspace'
               sh 'ls -la'
               sh 'rm -rf *'
               sh 'rm -rf .git'
               sh 'rm -rf .gitignore'
               sh 'ls -la'

               sh "docker --version"
               sh "mvn -version"
           }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }





       // Run snyk test to check for vulnerabilities and fail the build if any are found
       // Consider using --severity-threshold=<low|medium|high> for more granularity (see snyk help for more info).
       stage('Snyk Test using Snyk CLI') {
           steps {
               synkScan(SNYK_TOKEN)
           }
       }


        stage('Build'){
            steps {
                sh "mvn clean install"
            }
        }

        stage('Sonar scan'){
            steps {
                script {
                    try {
                        sh "mvn sonar:sonar"
                    } catch(error){
                        echo "The sonar server could not be reached ${error}"
                    }
                }
            }
         }

        stage("Image Prune") {
            steps {
                imagePrune(CONTAINER_NAME)
            }
        }

        stage('Image Build') {
            steps {
                imageBuild(CONTAINER_NAME, CONTAINER_TAG)
            }
        }

        stage('Push to Docker Registry') {
            steps {
                pushToImage(CONTAINER_NAME, CONTAINER_TAG)
            }
        }

        stage('Run App'){
            steps {
                runApp(CONTAINER_NAME, CONTAINER_TAG, DOCKER_HUB_USER, HTTP_PORT)
            }
        }
    }
}

def synkScan(snykToken){
    script {
        try {
            //sh "snyk auth $snykToken"
            snykSecurity snykInstallation: 'snyk', snykTokenId: '9c0b48e6-7f17-4844-a3aa-a6aec82a384e'
            sh 'npm install â€“g snyk'
            sh 'snyk test'
        } catch(error){
            echo "Snyk scan exception > Error Msg: ${error}"
        }
    }
}

def imagePrune(containerName){
    script {
        try {
            sh "docker image prune -f"
            sh "docker stop $containerName"
        } catch(error){
            echo "docker image prune exception > Error Msg: ${error}"
        }
    }
}


def imageBuild(containerName, tag){
    echo "Image build start.............."
    app = docker.build("ctraore/vsoc-jdi")
    echo "Image build complete."
}

def pushToImage(containerName, tag){
    echo "start pushing image to dockerhub..............."

    docker.withRegistry('https://registry.hub.docker.com', 'DOCKERHUB_CREDS') {
        app.push("latest")
	}
    echo "*** Image push complete ***"
}

def runApp(containerName, tag, dockerHubUser, httpPort){
    sh "docker pull $dockerHubUser/$containerName"
    sh "docker run -d --rm -p $httpPort:$httpPort --name $containerName $dockerHubUser/$containerName:$tag"
    echo "Application started on port: ${httpPort} (http)"
}