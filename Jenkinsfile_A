def CONTAINER_NAME="vsoc-jdi"
def CONTAINER_TAG="latest"
def DOCKER_HUB_USER="ctraore"
def HTTP_PORT="8090"

def app
 
node {

    stage('Initialize'){
        def dockerHome = tool 'docker'
        def mavenHome  = tool 'Maven'
        env.PATH = "${dockerHome}/bin:${mavenHome}/bin:${env.PATH}"
    }

    stage('Checkout') {
        checkout scm
    }

    stage('Build'){
        sh "mvn clean install"
    }

    stage('Sonar scan'){
        try {
            sh "mvn sonar:sonar"
        } catch(error){
            echo "The sonar server could not be reached ${error}"
        }
     }

    stage("Image Prune"){
        imagePrune(CONTAINER_NAME)
    }

    stage('Image Build'){
        imageBuild(CONTAINER_NAME, CONTAINER_TAG)
    }

    stage('Push to Docker Registry'){
        //withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CREDS', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            pushToImage(CONTAINER_NAME, CONTAINER_TAG)
        //}
    }

    stage('Run App'){
        runApp(CONTAINER_NAME, CONTAINER_TAG, DOCKER_HUB_USER, HTTP_PORT)
    }

}

def imagePrune(containerName){
    try {
        sh "docker image prune -f"
        sh "docker stop $containerName"
    } catch(error){
        echo "An exception occur!!!"
    }
}

def imageBuild(containerName, tag){
    //sh "docker build -t $containerName:$tag  -t $containerName --pull --no-cache ."
    app = docker.build("ctraore/vsoc-jdi")
    echo "Image build complete, image_name is ${app}"
}

def pushToImage(containerName, tag){
    echo "start pushing image to dockerhub..............."
    //sh "docker login -u $dockerUser -p $dockerPassword"
    //sh "docker tag $containerName:$tag $dockerUser/$containerName:$tag"
    //sh "docker push $dockerUser/$containerName:$tag"
    //echo "Image push complete"
    
    
    docker.withRegistry('https://registry.hub.docker.com', 'DOCKERHUB_CREDS') {
            app.push("latest")
	}
        echo "*** Image push complete ***"
    
}

def runApp(containerName, tag, dockerHubUser, httpPort){
    sh "docker pull $dockerHubUser/$containerName"
    sh "docker run -d --rm -p $httpPort:$httpPort --name $containerName $dockerHubUser/$containerName:$tag"
    echo "Application started on port: ${httpPort} (http)"
}
